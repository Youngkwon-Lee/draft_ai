// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // Pro user relationships
  clients       User[]    @relation("ProToClient")
  trainer       User?     @relation("ProToClient", fields: [trainerId], references: [id])
  trainerId     String?

  // Exercise routines
  routines      Routine[]
  
  @@index([trainerId])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token         String?
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Routine {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("active")
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   Exercise[]

  @@index([userId])
}

model Exercise {
  id          String    @id @default(cuid())
  name        String
  sets        Int
  reps        Int?
  duration    Int?
  notes       String?
  routineId   String
  routine     Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@index([routineId])
}
